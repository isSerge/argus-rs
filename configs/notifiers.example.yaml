# This is an example configuration file for defining notifiers.
# Notifiers define what happens when a monitor's filter script returns true.
# You can copy this file to `notifiers.yaml` and update `config.yaml` to point to it.

# ------------------------------------------------------------------------------------
# TEMPLATING CONTEXT
#
# All notification templates have access to the following top-level fields from
# the MonitorMatch object:
#
# - `monitor_id`: The unique ID of the monitor that triggered the match (integer).
# - `monitor_name`: The human-readable name of the monitor (string).
# - `notifier_name`: The name of the notifier handling this match (string).
# - `block_number`: The block number where the match occurred (integer).
# - `transaction_hash`: The hash of the transaction associated with the match (string).
#
# Additionally, the following structured objects are always available:
#
# - `tx`: An object containing details about the transaction.
#   - `tx.from`: The sender address of the transaction (string).
#   - `tx.to`: The recipient address of the transaction (string, can be null for contract creations).
#   - `tx.hash`: The transaction hash (string).
#   - `tx.value`: The value transferred in the transaction (string, as a large number).
#   - `tx.gas_limit`: The gas limit for the transaction (integer).
#   - `tx.nonce`: The transaction nonce (integer).
#   - `tx.input`: The transaction input data (string).
#   - `tx.block_number`: The block number where the transaction was included (integer).
#   - `tx.transaction_index`: The index of the transaction within its block (integer).
#   - `tx.gas_price`: (Legacy transactions) The gas price (string, as a large number).
#   - `tx.max_fee_per_gas`: (EIP-1559 transactions) The maximum fee per gas (string, as a large number).
#   - `tx.max_priority_fee_per_gas`: (EIP-1559 transactions) The maximum priority fee per gas (string, as a large number).
#   - `tx.gas_used`: (From receipt) The gas used by the transaction (string, as a large number).
#   - `tx.status`: (From receipt) The transaction status (integer, 1 for success, 0 for failure).
#   - `tx.effective_gas_price`: (From receipt) The effective gas price (string, as a large number).
#
# - `log`: An object containing details about the log/event. This will be `null`
#   if the match is transaction-based.
#   - `log.contract_address`: The address of the contract that emitted the log (string).
#   - `log.log_index`: The index of the log within its block (integer).
#   - `log.name`: The name of the decoded event (string, e.g., "Transfer").
#   - `log.params`: A map of the event's decoded parameters.
#     - `log.params.from`: (Example) The 'from' address from a Transfer event (string).
#     - `log.params.to`: (Example) The 'to' address from a Transfer event (string).
#     - `log.params.value`: (Example) The 'value' from a Transfer event (string).
#     - ... any other decoded event parameters.
# ------------------------------------------------------------------------------------
notifiers:
  # ------------------------------------------------------------------------------------
  # EXAMPLE 1: Generic Webhook
  #
  # This trigger sends a POST request to a generic webhook endpoint.
  # It includes an optional secret for HMAC-SHA256 signature verification.
  # ------------------------------------------------------------------------------------
  - name: "my-generic-webhook"
    webhook:
      # The URL of your webhook endpoint.
      url: "https://my-service.com/webhook-endpoint"
      # The HTTP method to use. Defaults to "POST".
      method: "POST"
      # (Optional) A secret key to sign the request payload.
      # If provided, Argus will compute an HMAC-SHA256 signature of the payload
      # and include it in the `X-Signature` header. The `X-Timestamp` header
      # will also be included.
      # The signature is computed as: hex(hmac_sha256(payload_body + timestamp, secret))
      secret: "your-super-secret-webhook-secret"
      # (Optional) Custom headers to include in the request.
      headers:
        Authorization: "Bearer your-auth-token"
        X-Custom-Header: "custom-value"
      # The message to send. Both `title` and `body` support templating.
      message:
        title: "New Transaction Alert: {{ monitor_name }}"
        # The body can use any data from the monitor match:
        # monitor_id, block_number, transaction_hash, contract_address, notifier_name,
        # log_index, log_name, log_params (for log matches),
        body: |
          A new match was detected for monitor {{ monitor_name }}.
          - **Block Number**: {{ block_number }}
          - **Transaction Hash**: {{ transaction_hash }}
          {% if log %}
          - **Type**: Log
          - **Contract Address**: {{ log.address }}
          - **Log Index**: {{ log.log_index }}
          - **Log Name**: {{ log.name }}
          - **Log Params**: {{ log.params }}
          {% endif %}

  # ------------------------------------------------------------------------------------
  # EXAMPLE 2: Slack Notification
  #
  # This trigger sends a message to a Slack channel via an Incoming Webhook.
  # ------------------------------------------------------------------------------------
  - name: "slack-notifications"
    slack:
      # Your Slack Incoming Webhook URL.
      slack_url: "https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX"
      message:
        title: "Large USDC Transfer Detected"
        # You can use markdown in the body.
        # The `trigger_data` here would come from the "Large USDC Transfers" monitor.
        # For example, if the filter script returns a map like `#{ from: log.params.from, to: log.params.to, value: log.params.value }`
        body: |
          A transfer of over 1,000,000 USDC was detected by monitor {{ monitor_name }}.
          - *From*: `{{ log.params.from }}`
          - *To*: `{{ log.params.to }}`
          - *Value*: `{{ log.params.value }}`
          <https://etherscan.io/tx/{{ transaction_hash }}|View on Etherscan>

  # ------------------------------------------------------------------------------------
  # EXAMPLE 3: Discord Notification
  #
  # This trigger sends a message to a Discord channel via a webhook.
  # ------------------------------------------------------------------------------------
  - name: "discord-alerts"
    discord:
      # Your Discord Webhook URL.
      discord_url: "https://discord.com/api/webhooks/000000000000000000/XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
      message:
        title: "WETH Deposit Event"
        body: |
          A new WETH deposit was detected on Ethereum by monitor {{ monitor_name }}.
          - **Transaction**: `{{ transaction_hash }}`
          - **Block**: {{ block_number }}
          - **Contract Address**: {{ log.address }}
          - **Log Name**: {{ log.name }}

  # ------------------------------------------------------------------------------------
  # EXAMPLE 4: Telegram Notification
  #
  # This trigger sends a message to a Telegram chat via a bot.
  # ------------------------------------------------------------------------------------
  - name: "telegram-updates"
    telegram:
      # Your Telegram Bot Token.
      token: "0000000000:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      # The ID of the chat to send the message to.
      chat_id: "-1000000000000"
      # (Optional) Disable the web page preview for links in the message.
      disable_web_preview: true
      message:
        title: "Large Native Token Transfer"
        # Telegram uses a specific version of Markdown (MarkdownV2).
        # Argus will automatically escape special characters for you.
        body: |
          A transfer of over 10 ETH was detected by monitor {{ monitor_name }}.
          - *Value*: {{ tx.value }} ETH
          - *From*: `{{ tx.from }}`
          - *To*: `{{ tx.to }}`
          [View on Etherscan](https://etherscan.io/tx/{{ transaction_hash }})

  # ------------------------------------------------------------------------------------
  # EXAMPLE 5: Trigger with Custom Retry Policy
  #
  # All triggers support a custom retry policy.
  # ------------------------------------------------------------------------------------
  - name: "webhook-with-custom-retry-policy"
    webhook:
      url: "https://my-flaky-service.com/webhook"
      message:
        title: "Notification with Custom Retry Policy for monitor {{ monitor_name }}"
        body: |
          This notification for monitor {{ monitor_name }}
          Block: {{ block_number }}
          Transaction: {{ transaction_hash }}
      # (Optional) Custom retry policy.
      retry_policy:
        # Maximum number of retries.
        max_retry: 5
        # Initial delay between retries in milliseconds.
        initial_delay_ms: 100
        # Factor by which the delay increases after each retry (e.g., 2.0 for exponential backoff).
        backoff_factor: 2.0

  # ------------------------------------------------------------------------------------
  # EXAMPLE 6: Notifier with a Throttling Policy
  #
  # This example demonstrates how to limit the rate of notifications using a
  # throttling policy. This is useful for high-frequency events where you
  # don't want to be overwhelmed with alerts.
  # ------------------------------------------------------------------------------------
  - name: "discord-with-throttling"
    discord:
      discord_url: "https://discord.com/api/webhooks/000000000000000000/XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
      message:
        title: "High-Frequency Event"
        body: "Monitor {{ monitor_name }} triggered for tx: `{{ transaction_hash }}`"
    # (Optional) Policy to apply to the notifier.
    policy:
      # The `throttle` policy limits the number of notifications sent within a
      # specified time window.
      throttle:
        # The maximum number of notifications to send within the time window.
        max_count: 5
        # The duration of the time window in seconds.
        # In this example, a maximum of 5 notifications will be sent every 60 seconds.
        time_window_secs: 60

  # ------------------------------------------------------------------------------------
  # EXAMPLE 7: Notifier with an Aggregation Policy
  #
  # This example shows how to group multiple matches into a single summary
  # notification using an aggregation policy. This is ideal for summarizing
  # events over a period of time instead of getting an alert for each one.
  # ------------------------------------------------------------------------------------
  - name: "slack-with-aggregation"
    slack:
      slack_url: "https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX"
      # The `message` here is a fallback for individual notifications if needed,
      # but the primary template is defined within the aggregation policy.
      message:
        title: "Aggregated Event Summary"
        body: "This is a summary of events."
    policy:
      # The `aggregation` policy collects all matches that occur within a time
      # window and sends a single, consolidated notification.
      aggregation:
        # The duration of the aggregation window in seconds.
        # All matches for a given monitor within this period will be grouped.
        window_secs: 300 # 5 minutes
        # The template for the aggregated notification.
        # This template has access to a `matches` array, which contains all the
        # `MonitorMatch` objects collected during the window.
        template:
          title: "Event Summary for {{ monitor_name }}"
          # You can iterate over the `matches` or use filters like `length`.
          body: |
            In the last 5 minutes there have been {{ matches | length }} new events
