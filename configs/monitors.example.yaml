# This is an example configuration file for defining monitors.
# You can copy this file to `monitors.yaml` and update `config.yaml` to point to it.

monitors:
  # ------------------------------------------------------------------------------------
  # EXAMPLE 1: Monitoring a Proxy Contract (USDC Transfers)
  #
  # This monitor tracks large transfers of the USDC stablecoin on the Ethereum network.
  # USDC is a proxy contract, which is a very common pattern. This means:
  #   1. The `address` you monitor is the PROXY address. This is the public address
  #      that users interact with and where the event logs are emitted.
  #   2. The ABI required to decode the events is from the IMPLEMENTATION contract.
  #
  # When the `issue_abi_loading.md` feature is implemented, you would provide the ABI
  # for the implementation contract, even while monitoring the proxy address.
  # ------------------------------------------------------------------------------------
  - name: "Large USDC Transfers (Ethereum)"
    # The network ID must match the `network_id` specified in your main `config.yaml`.
    network: "ethereum"
    # This is the PROXY contract address for USDC on Ethereum mainnet.
    address: "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
    # The ABI for the USDC contract.
    abi: "abis/usdc.json"
    # The Rhai script to filter events.
    # This script will be executed for every log emitted by the specified contract address.
    #
    # Available variables:
    # - `log`: An object containing the decoded log data.
    #   - `log.name`: The name of the event (e.g., "Transfer").
    #   - `log.params`: A map of the event's parameters (e.g., `log.params.from`, `log.params.value`).
    # - `tx`: An object containing the transaction data.
    #   - `tx.hash`, `tx.from`, `tx.to`, `tx.value`, etc.
    #
    # This script checks for the "Transfer" event and ensures the transfer value is
    # greater than 1,000,000 USDC.
    # The `usdc` function is a wrapper that correctly scales the value by the
    # token's 6 decimal places. `usdc(1_000_000)` is equivalent to
    # `bigint("1000000000000")`.
    filter_script: |
      log.name == "Transfer" && log.params.value > usdc(1_000_000)
    # Notifiers are used to send notifications when the monitor triggers.
    notifiers:
      # This monitor will use the "discord-alerts" notifier defined in `notifiers.yaml`.
      - "discord-alerts"

  # ------------------------------------------------------------------------------------
  # EXAMPLE 2: Monitoring a Standard Contract (WETH Deposits)
  #
  # This is a more straightforward example for a standard, non-proxy contract.
  # ------------------------------------------------------------------------------------
  - name: "WETH Deposits (Ethereum)"
    network: "ethereum"
    # This is the canonical address for Wrapped Ether (WETH) on Ethereum.
    address: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
    # The ABI for the WETH contract.
    abi: "abis/weth.json"
    # This script triggers for any "Deposit" event on the WETH contract.
    filter_script: 'log.name == "Deposit"'
    # Notifiers are used to send notifications when the monitor triggers.
    notifiers:
      # This monitor will use the "discord-alerts" notifier defined in `notifiers.yaml`.
      - "discord-alerts"

  # ------------------------------------------------------------------------------------
  # EXAMPLE 3: Monitoring Native Token Transfers (ETH)
  #
  # This monitor tracks large transfers of the native blockchain token (ETH).
  # Unlike contract-based tokens (like ERC20s), native token transfers do not
  # emit events. Instead, we can monitor them by inspecting the transaction fields
  # directly.
  #
  # To monitor all transactions on a network, you can omit the `address` field.
  # The filter script will then be executed for every transaction.
  #
  # In this case, the `log` variable will not be available. You must use the `tx`
  # object to define your filtering logic.
  # ------------------------------------------------------------------------------------
  - name: "Large ETH Transfers (Ethereum)"
    network: "ethereum"
    # By omitting the `address`, this monitor will inspect every transaction on the network.
    # This is ideal for monitoring native currency transfers.
    # The filter script will check the transaction's `value` field.
    #
    # This script checks for transactions where the value is greater than 10 ETH.
    # The `ether` function is a wrapper that correctly scales the value to Wei
    # (18 decimal places). `ether(10)` is equivalent to
    # `bigint("10000000000000000000")`.
    filter_script: |
      tx.value > ether(10)
    # Notifiers are used to send notifications when the monitor triggers.
    notifiers:
      # This monitor will use the "discord-alerts" notifier defined in `notifiers.yaml`.
      - "discord-alerts"

  # ------------------------------------------------------------------------------------
  # EXAMPLE 4: Global Log Monitoring (All Large ERC20 Transfers)
  #
  # By omitting the `address` field BUT using the `log` variable in the script,
  # you create a "global log monitor".
  #
  # This monitor will execute its script for EVERY log on the blockchain that can be
  # successfully decoded by the provided ABI. This allows you to watch for specific
  # events (like "Transfer") across all contracts.
  # ------------------------------------------------------------------------------------
  - name: "All Large ERC20 Transfers (Ethereum)"
    network: "ethereum"
    # NO `address` is specified.
    # The ABI should be a generic one that matches the event you're looking for.
    # For example, a standard ERC20 ABI can decode "Transfer" events from any
    # ERC20-compliant token contract.
    abi: "abis/usdc.json" # A generic ERC20 ABI
    # The engine detects that this script accesses `log`, so it knows to run it
    # against logs. Since `address` is missing, it runs it against ALL logs.
    #
    # This script finds any "Transfer" event where the value exceeds 500,000 tokens.
    # The `decimal` function allows you to specify the value with decimal places.
    filter_script: |
      log.name == "Transfer" && log.params.value > decimal(500_000, 6)
    notifiers:
      - "discord-alerts"

  # ------------------------------------------------------------------------------------
  # EXAMPLE 5: Correlating Transaction and Log Data
  #
  # This monitor demonstrates how to correlate transaction properties with log data
  # in a single script. The `tx` and `log` variables are both available for any
  # log-aware monitor.
  #
  # This example watches for any "Transfer" event that was initiated by a specific
  # Externally Owned Account (EOA).
  # ------------------------------------------------------------------------------------
  - name: "All Transfers from a specific EOA"
    network: "ethereum"
    # This is a global log monitor, so we omit the `address`.
    abi: "abis/usdc.json" # A generic ERC20 ABI
    # This script runs for every "Transfer" log and checks if the parent
    # transaction's sender (`tx.from`) matches a specific address.
    # This is useful for tracking all on-chain activity of a particular user.
    filter_script: |
      log.name == "Transfer" &&
      tx.from == address("0x0000000000000000000000000000000000000001")
    notifiers:
      - "discord-alerts"
